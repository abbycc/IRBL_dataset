<?xml version="1.0" encoding="utf-8"?>
<bugrepository name="MATH">
	<bug fixdate="2006-06-05 10:16:21" id="60" opendate="2006-05-14 04:20:21" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>[math] Function math.fraction.ProperFractionFormat.parse(String, ParsePosition) return illogical result</summary>
			
			
			<description>Hello,
I find illogical returned result from function &quot;Fraction parse(String source, 
ParsePostion pos)&quot; (in class ProperFractionFormat of the Fraction Package) of 
the Commons Math library. Please see the following code segment for more 
details:
&quot;
ProperFractionFormat properFormat = new ProperFractionFormat();
result = null;
String source = &quot;1 -1 / 2&quot;;
ParsePosition pos = new ParsePosition(0);
//Test 1 : fail 
public void testParseNegative(){
   String source = &quot;-1 -2 / 3&quot;;
   ParsePosition pos = new ParsePosition(0);
   Fraction actual = properFormat.parse(source, pos);
   assertNull(actual);
}
// Test2: success
public void testParseNegative(){
   String source = &quot;-1 -2 / 3&quot;;
   ParsePosition pos = new ParsePosition(0);
   Fraction actual = properFormat.parse(source, pos);  // return Fraction 1/3
   assertEquals(1, source.getNumerator());
   assertEquals(3, source.getDenominator());
}
&quot;
Note: Similarly, when I passed in the following inputs: 
  input 2: (source = 1 2 / -3, pos = 0)
  input 3: ( source =  -1 -2 / 3, pos = 0)
Function &quot;Fraction parse(String, ParsePosition)&quot; returned Fraction 1/3 (means 
the result Fraction had numerator = 1 and  denominator = 3)for all 3 inputs 
above.
I think the function does not handle parsing the numberator/ denominator 
properly incase input string provide invalid numerator/denominator. 
Thank you!</description>
			
			
			<version>1.1</version>
			
			
			<fixedVersion/>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.math.fraction.ProperFractionFormat.java</file>
			
			
			<file type="M">org.apache.commons.math.fraction.FractionFormatTest.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is duplicated by" type="Duplicate">42</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2006-06-05 10:17:24" id="42" opendate="2006-05-14 05:08:05" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>[math] Function &quot;Fraction math.fraction.FractionFormat.parse(String, ParsePosition) &quot; does not handle parsing the numerater properly</summary>
			
			
			<description>Hello,
While testing function &quot;Fraction math.fraction.FractionFormat.parse(String, 
ParsePosition) &quot;, I found it did not handle properly the case the input string 
passed in is incorrect. 
When I passed in a String that represented a Fraction to be parsed, if the 
Fraction embedded in the String had a whole value, while either the numerator 
or denominator had the negative sign, the function just returned 
1/abs(denomitator).
Please see the following code segment for more details:
&quot;   
  NumberFormat nf = null; 
  FractionFormat properFormat = FractionFormat.getProperInstance
(Locale.getDefault());
  FractionFormat improperFormat = FractionFormat.getImproperInstance
(Locale.getDefault());
//Test 1 : fail 
public void testParseNegative(){
   String source = &quot;1 -2 / 3&quot;;
   ParsePosition pos = new ParsePosition(0);
   Fraction actual = properFormat.parse(source, pos);
   assertNull(actual);
}
// Test2: success
public void testParseNegative(){
   String source = &quot;1 -2 / 3&quot;;
   ParsePosition pos = new ParsePosition(0);
   Fraction actual = properFormat.parse(source, pos);  // return Fraction 1/3
   assertEquals(1, source.getNumerator());
   assertEquals(3, source.getDenominator());
}
&quot;
Note: Similarly, when I passed in the following inputs: 
  input 2: (source = 1 2 / -3, pos = 0)
  input 3: ( source =  -1 -2 / 3, pos = 0)
Function &quot;Fraction parse(String, ParsePosition)&quot; returned Fraction 1/3 (means 
the result Fraction had numerator = 1 and  denominator = 3)for all 3 inputs 
above.
I think the function does not handle parsing the numberator/ denominator 
properly incase input string provides negative numerator or negative 
denominator while there is the whole value.
Thank you!
Nhung</description>
			
			
			<version>1.1</version>
			
			
			<fixedVersion/>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.math.fraction.ProperFractionFormat.java</file>
			
			
			<file type="M">org.apache.commons.math.fraction.FractionFormatTest.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="duplicates" type="Duplicate">60</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2006-07-04 15:19:28" id="151" opendate="2006-06-05 22:22:11" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>MathUtils.round incorrect result</summary>
			
			
			<description>MathUtils.round(39.245, 2) results 39.24, however it should be 39.25, with default rounding mode BigDecimal.ROUND_HALF_UP.
I found that internally MathUtils.round multiplies the given number by 10^scale.
 39.245 * 100.0 results 3924.49999...5 , and after this the calculation is not correct any more.</description>
			
			
			<version>1.1</version>
			
			
			<fixedVersion/>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.math.util.MathUtilsTest.java</file>
			
			
			<file type="M">org.apache.commons.math.util.MathUtils.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2006-07-06 12:11:34" id="85" opendate="2006-04-28 00:00:55" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>[math]  SimpleRegression getSumSquaredErrors</summary>
			
			
			<description>getSumSquaredErrors returns -ve value. See test below:
public void testSimpleRegression() {
		double[] y = 
{  8915.102, 8919.302, 8923.502}
;
		double[] x = 
{ 1.107178495, 1.107264895, 1.107351295}
;
		double[] x2 = 
{ 1.107178495E2, 1.107264895E2, 1.107351295E2}
;
		SimpleRegression reg = new SimpleRegression();
		for (int i = 0; i &amp;lt; x.length; i++) 
{
			reg.addData(x[i],y[i]);
		}
		assertTrue(reg.getSumSquaredErrors() &amp;gt;= 0.0); // OK
		reg.clear();
		for (int i = 0; i &amp;lt; x.length; i++) 
{
			reg.addData(x2[i],y[i]);
		}
		assertTrue(reg.getSumSquaredErrors() &amp;gt;= 0.0); // FAIL
	}</description>
			
			
			<version>1.1</version>
			
			
			<fixedVersion/>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.math.stat.regression.SimpleRegressionTest.java</file>
			
			
			<file type="M">org.apache.commons.math.stat.regression.SimpleRegression.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2007-04-05 15:20:45" id="153" opendate="2006-07-31 03:48:24" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>RandomDataImpl nextInt(int, int) nextLong(long, long)</summary>
			
			
			<description>RandomDataImpl.nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE) suffers from overflow errors.
change
return lower + (int) (rand.nextDouble() * (upper - lower + 1));
to
return (int) (lower + (long) (rand.nextDouble()*((long) upper - lower + 1)));
additional checks must be made for the nextlong(long, long) method.
At first I thought about using MathUtils.subAndCheck(long, long) but there is only an int version avalible, and the problem is that subAndCheck internaly uses long values to check for overflow just as my previous channge proposes.  The only thing I can think of is using a BigInteger to check for the number of bits required to express the difference.</description>
			
			
			<version>1.1</version>
			
			
			<fixedVersion>1.2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.math.random.RandomDataTest.java</file>
			
			
			<file type="M">org.apache.commons.math.random.RandomDataImpl.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2007-06-20 22:24:30" id="166" opendate="2007-06-04 09:34:54" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Special functions not very accurate</summary>
			
			
			<description>The Gamma and Beta functions return values in double precision but the default epsilon is set to 10e-9. I think that the default should be set to the highest possible accuracy, as this is what I&amp;amp;apos;d expect to be returned by a double precision routine. Note that the erf function already uses a call to Gamma.regularizedGammaP with an epsilon of 1.0e-15.</description>
			
			
			<version>1.1</version>
			
			
			<fixedVersion>1.2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.math.special.Gamma.java</file>
			
			
			<file type="M">org.apache.commons.math.special.GammaTest.java</file>
			
			
			<file type="M">org.apache.commons.math.special.Beta.java</file>
			
			
			<file type="M">org.apache.commons.math.special.BetaTest.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2008-01-09 05:17:45" id="175" opendate="2007-12-04 02:31:53" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>chiSquare(double[] expected, long[] observed) is returning incorrect test statistic</summary>
			
			
			<description>ChiSquareTestImpl is returning incorrect chi-squared value. An implicit assumption of public double chiSquare(double[] expected, long[] observed) is that the sum of expected and observed are equal. That is, in the code:
for (int i = 0; i &amp;lt; observed.length; i++) 
{
            dev = ((double) observed[i] - expected[i]);
            sumSq += dev * dev / expected[i];
        }
this calculation is only correct if sum(observed)==sum(expected). When they are not equal then one must rescale the expected value by sum(observed) / sum(expected) so that they are.
Ironically, it is an example in the unit test ChiSquareTestTest that highlights the error:
long[] observed1 = 
{ 500, 623, 72, 70, 31 }
;
        double[] expected1 = 
{ 485, 541, 82, 61, 37 }
;
        assertEquals( &quot;chi-square test statistic&quot;, 16.4131070362, testStatistic.chiSquare(expected1, observed1), 1E-10);
        assertEquals(&quot;chi-square p-value&quot;, 0.002512096, testStatistic.chiSquareTest(expected1, observed1), 1E-9);
16.413 is not correct because the expected values do not make sense, they should be: 521.19403 581.37313  88.11940  65.55224  39.76119 so that the sum of expected equals 1296 which is the sum of observed.
Here is some R code (r-project.org) which proves it:
&amp;gt; o1
[1] 500 623  72  70  31
&amp;gt; e1
[1] 485 541  82  61  37
&amp;gt; chisq.test(o1,p=e1,rescale.p=TRUE)
        Chi-squared test for given probabilities
data:  o1 
X-squared = 9.0233, df = 4, p-value = 0.06052
&amp;gt; chisq.test(o1,p=e1,rescale.p=TRUE)$observed
[1] 500 623  72  70  31
&amp;gt; chisq.test(o1,p=e1,rescale.p=TRUE)$expected
[1] 521.19403 581.37313  88.11940  65.55224  39.76119
</description>
			
			
			<version>1.1</version>
			
			
			<fixedVersion>1.2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.math.stat.inference.ChiSquareTestTest.java</file>
			
			
			<file type="M">org.apache.commons.math.stat.inference.TestUtilsTest.java</file>
			
			
			<file type="M">org.apache.commons.math.stat.inference.ChiSquareTestImpl.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2008-02-11 01:05:28" id="184" opendate="2008-02-01 22:17:45" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>cumulativeProbability((double)n, (double)n) returns 0 for integer distributions</summary>
			
			
			<description>cumulativeProbability((double)n, (double)n) returns 0 for
discrete/integer distributions
I suppose AbstractIntegerDistribution.cumulativeProbability(double,
double) should be overridden to call its (int, int) version instead of
using default one from AbstractDistribution</description>
			
			
			<version>1.1</version>
			
			
			<fixedVersion>1.2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.math.distribution.AbstractIntegerDistribution.java</file>
			
			
			<file type="M">org.apache.commons.math.distribution.IntegerDistributionAbstractTest.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2009-10-27 01:33:42" id="306" opendate="2009-10-24 14:23:13" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Method &amp;apos;divide&amp;apos; in class &amp;apos;Complex&amp;apos; uses a false formula for a special case resulting in erroneous division by zero.</summary>
			
			
			<description>The formula that &amp;amp;apos;divide&amp;amp;apos; wants to implement is
( a + bi )  /  ( c + di )  =  ( ac + bd + ( bc - ad ) i )  /  ( c^2 + d^2 )
as correctly written in the description.
When c == 0.0 this leads to the special case
( a + bi )  /  di  = ( b / d ) - ( a / d ) i
But the corresponding code is:
if (c == 0.0) 
{

    return createComplex(imaginary/d, -real/c);

}

The bug is the last division -real/c, which should obviously be -real/d.</description>
			
			
			<version>1.1</version>
			
			
			<fixedVersion>2.1</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.math.complex.Complex.java</file>
			
			
			<file type="M">org.apache.commons.math.complex.ComplexTest.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2011-08-03 04:17:43" id="640" opendate="2011-08-02 19:06:35" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>AbstractRandomGenerator nextInt() and nextLong() default implementations generate only positive values</summary>
			
			
			<description>The javadoc for these methods (and what is specified in the RandomGenerator interface) says that all int / long values should be in the range of these methods.  The default implementations provided in this class do not generate negative values.</description>
			
			
			<version>1.1</version>
			
			
			<fixedVersion>3.0</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.math.random.MersenneTwisterTest.java</file>
			
			
			<file type="M">org.apache.commons.math.random.Well44497bTest.java</file>
			
			
			<file type="M">org.apache.commons.math.random.Well512aTest.java</file>
			
			
			<file type="M">org.apache.commons.math.random.Well44497aTest.java</file>
			
			
			<file type="M">org.apache.commons.math.random.Well19937aTest.java</file>
			
			
			<file type="M">org.apache.commons.math.random.RandomDataTest.java</file>
			
			
			<file type="M">org.apache.commons.math.random.Well1024aTest.java</file>
			
			
			<file type="M">org.apache.commons.math.random.AbstractRandomGeneratorTest.java</file>
			
			
			<file type="M">org.apache.commons.math.random.Well19937cTest.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
</bugrepository>
