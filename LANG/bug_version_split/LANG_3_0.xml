<?xml version="1.0" encoding="utf-8"?>
<bugrepository name="LANG">
	<bug fixdate="2010-03-08 22:22:11" id="602" opendate="2010-03-07 09:55:21" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>ContextedRuntimeException no longer an &amp;apos;unchecked&amp;apos; exception</summary>
			
			
			<description>The purpose of ContextedRuntimeException was to provide an &amp;amp;apos;unchecked&amp;amp;apos; exception with contexted features.  the fact that it now extends &amp;amp;apos;java.langException&amp;amp;apos; makes it a checked exception identical to ContextedException and doesn&amp;amp;apos;t fulfill its purpose.
Recommend you either just remove ContextedRuntimeException (as it&amp;amp;apos;s now redundant with ContextedException) or revert the change that has it extending java.lang.Exception back so that it extends java.lang.RuntimeException.  I would prefer keeping ContextedRuntimeException and having it extend RuntimeException.
I apologize for not catching this earlier.  I only caught it now in attempt to use ContextedRuntimeException on one of my projects and discovering that it is no longer unchecked.
Thanks for looking at this.</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.0</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.exception.ContextedRuntimeException.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2010-11-13 16:52:16" id="658" opendate="2010-11-13 14:31:25" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Some Entitys like &amp;Ouml; are not matched properly against its ISO8859-1 representation</summary>
			
			
			<description>In EntityArrays 
In
 private static final String[][] ISO8859_1_ESCAPE 
some matching is wrong, for example

 

        {&quot;\u00D7&quot;, &quot;&amp;amp;Ouml;&quot;}, //  - uppercase O, umlaut

        {&quot;\u00D8&quot;, &quot;&amp;amp;times;&quot;}, // multiplication sign



but this must be   

 

       {&quot;\u00D6&quot;, &quot;&amp;amp;Ouml;&quot;}, //  - uppercase O, umlaut

        {&quot;\u00D7&quot;, &quot;&amp;amp;times;&quot;}, // multiplication sign



according to http://www.fileformat.info/info/unicode/block/latin_supplement/list.htm
First look:
u00CA is missing in the array and all following entries are matched wrong by an offset of 1.
Found on http://stackoverflow.com/questions/4172784/bug-in-apache-commons-stringescapeutil/4172915#4172915</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.0</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.text.translate.EntityArrays.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is duplicated by" type="Duplicate">705</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2010-11-13 16:54:37" id="659" opendate="2010-11-13 15:54:42" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>EntityArrays typo: {&quot;\u2122&quot;, &quot;&amp;minus;&quot;}, // minus sign, U+2212 ISOtech</summary>
			
			
			<description>EntityArrays typo in HTML40_EXTENDED_ESCAPE: 

      {&quot;\u2122&quot;, &quot;&amp;amp;minus;&quot;}, // minus sign, U+2212 ISOtech



should be

      {&quot;\u2212&quot;, &quot;&amp;amp;minus;&quot;}, // minus sign, U+2212 ISOtech



as is obvious from the comment and the position in the list.</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.0</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.text.translate.EntityArrays.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is duplicated by" type="Duplicate">705</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2011-01-17 04:30:27" id="662" opendate="2010-12-06 22:40:30" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>org.apache.commons.lang3.math.Fraction does not reduce (Integer.MIN_VALUE, 2^k)</summary>
			
			
			<description>The greatestCommonDivisor method in class Fraction does not find the gcd of Integer.MIN_VALUE and 2^k, and this case can be triggered by taking Integer.MIN_VALUE as the numerator. Note that the case of taking Integer.MIN_VALUE as the denominator is handled explicitly in the getReducedFraction factory method.
FractionTest.java


	// additional test cases

	public void testReducedFactory_int_int() {

		// ...

		f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);

		assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());

		assertEquals(1, f.getDenominator());



	public void testReduce() {

		// ...

		f = Fraction.getFraction(Integer.MIN_VALUE, 2);

		result = f.reduce();

		assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());

		assertEquals(1, result.getDenominator());


 </description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.0</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.math.FractionTest.java</file>
			
			
			<file type="M">org.apache.commons.lang3.math.Fraction.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="relates to" type="Reference">663</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2011-06-08 16:10:31" id="705" opendate="2011-06-08 15:50:02" resolution="Duplicate">
		
		
		<buginformation>
			
			
			<summary>StringEscapeUtil generate wrong output for some entities</summary>
			
			
			<description>The entities such as &quot;&quot; are not correctly encoded in the org.apache.commons.lang3.text.translate.EntityArrays. E.g. &quot;&quot; is encoded as &quot;00E4&quot; according to the ISO-8859-1 standard, but is assigned to &quot;00E5&quot; in the class EntityArrays.
The consequence is, that StringEscapeUtil can not produce correct output.</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion/>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.text.translate.EntityArrays.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="duplicates" type="Duplicate">658</link>
			
			
			<link description="duplicates" type="Duplicate">659</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2011-07-09 05:09:46" id="710" opendate="2011-07-01 20:57:30" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>StringIndexOutOfBoundsException when calling unescapeHtml4(&quot;&amp;#03&quot;)</summary>
			
			
			<description>When calling unescapeHtml4() on the String &quot;&amp;amp;#03&quot; (or any String that contains these characters) an Exception is thrown:
Exception in thread &quot;main&quot; java.lang.StringIndexOutOfBoundsException: String index out of range: 4
	at java.lang.String.charAt(String.java:686)
	at org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(NumericEntityUnescaper.java:49)
	at org.apache.commons.lang3.text.translate.AggregateTranslator.translate(AggregateTranslator.java:53)
	at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:88)
	at org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(CharSequenceTranslator.java:60)
	at org.apache.commons.lang3.StringEscapeUtils.unescapeHtml4(StringEscapeUtils.java:351)</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.0</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest.java</file>
			
			
			<file type="M">org.apache.commons.lang3.text.translate.NumericEntityUnescaper.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2011-07-14 18:50:17" id="720" opendate="2011-07-14 13:24:55" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>StringEscapeUtils.escapeXml(input) outputs wrong results when an input contains characters in Supplementary Planes.</summary>
			
			
			<description>Hello.
I use StringEscapeUtils.escapeXml(input) to escape special characters for XML.
This method outputs wrong results when input contains characters in Supplementary Planes.
String str1 = &quot;\uD842\uDFB7&quot; + &quot;A&quot;;
String str2 = StringEscapeUtils.escapeXml(str1);
// The value of str2 must be equal to the one of str1,
// because str1 does not contain characters to be escaped.
// However, str2 is diffrent from str1.
System.out.println(URLEncoder.encode(str1, &quot;UTF-16BE&quot;)); //%D8%42%DF%B7A
System.out.println(URLEncoder.encode(str2, &quot;UTF-16BE&quot;)); //%D8%42%DF%B7%FF%FD
The cause of this problem is that the loop to translate input character by character is wrong.
In CharSequenceTranslator.translate(CharSequence input, Writer out),
loop counter &quot;i&quot; moves from 0 to Character.codePointCount(input, 0, input.length()),
but it should move from 0 to input.length().</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.0.1</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.StringEscapeUtilsTest.java</file>
			
			
			<file type="M">org.apache.commons.lang3.text.translate.CharSequenceTranslator.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2011-08-02 18:16:48" id="734" opendate="2011-08-02 17:59:48" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>The CHAR_ARRAY cache in CharUtils duplicates the cache in java.lang.Character</summary>
			
			
			<description>The CHAR_ARRAY cache in CharUtils duplicates the cache in java.lang.Character.</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.0.1</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.CharUtils.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2011-08-06 15:44:14" id="727" opendate="2011-07-15 06:58:19" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>ToStringBuilderTest.testReflectionHierarchyArrayList fails with IBM JDK 6</summary>
			
			
			<description>The unit test fails when running with IBM JDK 6:

Failed tests:

testReflectionHierarchyArrayList(org.apache.commons.lang3.builder.ToStringBuilderTest):null

expected:&amp;lt;....ArrayList@115b115b[[elementData={&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,null&amp;gt;,null&amp;gt;,null&amp;gt;},size=0],modCount=0]&amp;gt;

but was:&amp;lt;....ArrayList@115b115b[[firstIndex=0,lastIndex=0,array={&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,&amp;lt;null&amp;gt;,null&amp;gt;,null&amp;gt;,null&amp;gt;}],modCount=0]&amp;gt;



Actually the test is wrong, because it makes wrong assumptions about the implementation of ArrayList in the runtime.</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.0.1</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.builder.ToStringBuilderTest.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2011-08-16 14:07:08" id="736" opendate="2011-08-02 18:19:53" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>CharUtils static final array CHAR_STRING is not needed to compute CHAR_STRING_ARRAY</summary>
			
			
			<description>CharUtils static final array CHAR_STRING is not needed to compute CHAR_STRING_ARRAY.
This:



    private static final String CHAR_STRING = 

        &quot;\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007&quot; +

        &quot;\b\t\n\u000b\f\r\u000e\u000f&quot; +

        &quot;\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017&quot; +

        &quot;\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f&quot; +

        &quot;\u0020\u0021\&quot;\u0023\u0024\u0025\u0026\u0027&quot; +

        &quot;\u0028\u0029\u002a\u002b\u002c\u002d\u002e\u002f&quot; +

        &quot;\u0030\u0031\u0032\u0033\u0034\u0035\u0036\u0037&quot; +

        &quot;\u0038\u0039\u003a\u003b\u003c\u003d\u003e\u003f&quot; +

        &quot;\u0040\u0041\u0042\u0043\u0044\u0045\u0046\u0047&quot; +

        &quot;\u0048\u0049\u004a\u004b\u004c\u004d\u004e\u004f&quot; +

        &quot;\u0050\u0051\u0052\u0053\u0054\u0055\u0056\u0057&quot; +

        &quot;\u0058\u0059\u005a\u005b\\\u005d\u005e\u005f&quot; +

        &quot;\u0060\u0061\u0062\u0063\u0064\u0065\u0066\u0067&quot; +

        &quot;\u0068\u0069\u006a\u006b\u006c\u006d\u006e\u006f&quot; +

        &quot;\u0070\u0071\u0072\u0073\u0074\u0075\u0076\u0077&quot; +

        &quot;\u0078\u0079\u007a\u007b\u007c\u007d\u007e\u007f&quot;;



// snip



        for (int i = 127; i &amp;gt;= 0; i--) {

            CHAR_STRING_ARRAY[i] = CHAR_STRING.substring(i, i + 1);

        }



Can be recoded as:



        for (char c = 0; c &amp;lt; CHAR_STRING_ARRAY.length; c++) {

            CHAR_STRING_ARRAY[c] = String.valueOf(c);

        }



With the lang 3.0 code, using the Oracle Java 5 String impl, the 128 Strings share the underlying CHAR_STRING char[] because of the way Sun implemented String#substring(int,int).
The proposed implementation does not reply on this private implementation detail but creates one char[1] array per String. 
Thoughts?</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.1</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.CharUtils.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2011-08-23 12:33:42" id="746" opendate="2011-08-23 12:32:12" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>NumberUtils does not handle upper-case hex: 0X and -0X</summary>
			
			
			<description>NumberUtils.createNumber() should work equally for 0x1234 and 0X1234; currently 0X1234 generates a NumberFormatException
Integer.decode() handles both upper and lower case hex.</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.1</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.math.NumberUtilsTest.java</file>
			
			
			<file type="M">org.apache.commons.lang3.math.NumberUtils.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2014-01-20 17:20:38" id="613" opendate="2010-03-27 22:49:50" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>ConstructorUtils.getAccessibleConstructor() Does Not Check the Accessibility of Enclosing Classes</summary>
			
			
			<description>ConstructorUtils.getAccessibleConstructor() checks if the declaring class is public but not whether it&amp;amp;apos;s a top-level class or an enclosed one.  Consequently, with enclosed declaring classes, the method does not check if the enclosing class is public, or it&amp;amp;apos;s enclosing class, or it&amp;amp;apos;s enclosing class, etc...</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion>3.3</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.reflect.ConstructorUtils.java</file>
			
			
			<file type="M">org.apache.commons.lang3.reflect.ConstructorUtilsTest.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2014-12-27 16:31:05" id="733" opendate="2011-07-31 11:55:11" resolution="Duplicate">
		
		
		<buginformation>
			
			
			<summary>Add containsAny(CharSequence cs, CharSequence... searchChars) to StringUtils</summary>
			
			
			<description>This method is missing from StringUtils. The corresponding method: 
public static boolean containsAny(CharSequence cs, char... searchChars) {
does exist, so this was probably just forgotten. 
Also
public static boolean containsIgnoreCase(CharSequence str, CharSequence... searchStr) {
needs to be added as well.</description>
			
			
			<version>3.0</version>
			
			
			<fixedVersion/>
			
			
			<type>New Feature</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang3.StringUtils.java</file>
			
			
			<file type="M">org.apache.commons.lang3.StringUtilsEqualsIndexOfTest.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is duplicated by" type="Duplicate">883</link>
			
		
		</links>
		
	
	</bug>
</bugrepository>
