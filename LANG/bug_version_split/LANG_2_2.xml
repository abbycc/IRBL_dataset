<?xml version="1.0" encoding="utf-8"?>
<bugrepository name="LANG">
	<bug fixdate="2006-10-31 22:15:27" id="294" opendate="2006-10-31 11:07:08" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>StrBuilder.replaceAll and StrBuilder.deleteAll can throw ArrayIndexOutOfBoundsException.</summary>
			
			
			<description>StrBuilder.replaceAll and StrBuilder.deleteAll can thrown ArrayIndexOutOfBoundsException&amp;amp;apos;s. Here are a couple of additions to the StrBuilderTest class that demonstrate this problem:
StrBuilder.deleteAll() - added to testDeleteAll_String():
        sb = new StrBuilder(&quot;\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n&quot;);
        sb.deleteAll(&quot;\n%BLAH%&quot;);
        assertEquals(&quot;\nDo more stuff\neven more stuff\n&quot;, sb.toString());
this causes the following error:
java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.commons.lang.text.StrBuilder.deleteImpl(StrBuilder.java:1114)
	at org.apache.commons.lang.text.StrBuilder.deleteAll(StrBuilder.java:1188)
	at org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_String(StrBuilderTest.java:606)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
StrBuilder.replaceAll() - added to testReplaceAll_String_String():
        sb = new StrBuilder(&quot;\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n&quot;);
        sb.replaceAll(&quot;\n%BLAH%&quot;, &quot;&quot;);
        assertEquals(&quot;\nDo more stuff\neven more stuff\n&quot;, sb.toString());
this causes the exception:
java.lang.ArrayIndexOutOfBoundsException
	at java.lang.System.arraycopy(Native Method)
	at org.apache.commons.lang.text.StrBuilder.replaceImpl(StrBuilder.java:1256)
	at org.apache.commons.lang.text.StrBuilder.replaceAll(StrBuilder.java:1339)
	at org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_String_String(StrBuilderTest.java:763)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at junit.framework.TestCase.runTest(TestCase.java:154)
	at junit.framework.TestCase.runBare(TestCase.java:127)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:118)
	at junit.framework.TestSuite.runTest(TestSuite.java:208)
	at junit.framework.TestSuite.run(TestSuite.java:203)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion>2.3</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.text.StrBuilderTest.java</file>
			
			
			<file type="M">org.apache.commons.lang.text.StrBuilder.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2006-12-12 22:35:59" id="299" opendate="2006-12-11 11:58:25" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Bug in method appendFixedWidthPadRight of class StrBuilder causes an ArrayIndexOutOfBoundsException</summary>
			
			
			<description>There&amp;amp;apos;s a bug in method appendFixedWidthPadRight of class StrBuilder:
public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
        if (width &amp;gt; 0) {
            ensureCapacity(size + width);
            String str = (obj == null ? getNullText() : obj.toString());
            int strLen = str.length();
            if (strLen &amp;gt;= width) 
{
 ==&amp;gt;            str.getChars(0, strLen, buffer, size);   &amp;lt;==== BUG: it should be str.getChars(0, width, buffer, size);
            }
 else {
                int padLen = width - strLen;
                str.getChars(0, strLen, buffer, size);
                for (int i = 0; i &amp;lt; padLen; i++) 
{
                    buffer[size + strLen + i] = padChar;
                }
            }
            size += width;
        }
        return this;
    }
This is causing an ArrayIndexOutOfBoundsException, so this method is unusable when strLen &amp;gt; width.
It&amp;amp;apos;s counterpart method appendFixedWidthPadLeft seems to be ok.</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion>2.3</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.text.StrBuilderAppendInsertTest.java</file>
			
			
			<file type="M">org.apache.commons.lang.text.StrBuilder.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2006-12-19 21:50:46" id="300" opendate="2006-12-19 17:47:43" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>NumberUtils.createNumber throws NumberFormatException for one digit long</summary>
			
			
			<description>NumberUtils.createNumber throws a NumberFormatException when parsing &quot;1l&quot;, &quot;2l&quot; .. etc...
It works fine if you try to parse &quot;01l&quot; or &quot;02l&quot;.  The condition isDigits(numeric.substring(1)), line 455 return false as numeric.substring(1) is an empty string for &quot;1l&quot;</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion>2.3</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.math.NumberUtils.java</file>
			
			
			<file type="M">org.apache.commons.lang.NumberUtils.java</file>
			
			
			<file type="M">org.apache.commons.lang.math.NumberUtilsTest.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is related to" type="Reference">457</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2006-12-22 20:35:51" id="304" opendate="2006-12-22 20:32:58" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>NullPointerException in isAvailableLocale(Locale)</summary>
			
			
			<description>FindBugs pointed out:
   UwF: Field not initialized in constructor: org.apache.commons.lang.LocaleUtils.cAvailableLocaleSet
cAvailableSet is used directly once in the source - and if availableLocaleSet() hasn&amp;amp;apos;t been called it will cause a NullPointerException.</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion>2.3</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.LocaleUtils.java</file>
			
			
			<file type="M">org.apache.commons.lang.LocaleUtilsTest.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2006-12-26 22:08:27" id="303" opendate="2006-12-22 19:55:34" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>FastDateFormat.mRules is not transient or serializable</summary>
			
			
			<description>Reported by FindBugs.
Either we need to make the Rule interface Serializable, or make mRules transient and add deserializing code to kick off init().</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion>2.3</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.time.FastDateFormatTest.java</file>
			
			
			<file type="M">org.apache.commons.lang.time.FastDateFormat.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2007-01-01 23:29:28" id="102" opendate="2006-04-24 13:19:35" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>[lang] Refactor Entities methods</summary>
			
			
			<description>The pairs of escape and unescape methods in Entities need to be modified so that
they call each other (one escape to the other escape etc). Otherwise there&amp;amp;apos;s a
large chunk of repeated code that gives us a high chance of errors.</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion>2.3</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.Entities.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2007-08-09 00:25:20" id="346" opendate="2007-07-06 20:06:55" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Dates.round() behaves incorrectly for minutes and seconds</summary>
			
			
			<description>Get unexpected output for rounding by minutes or seconds.
public void testRound()
{
    Calendar testCalendar = Calendar.getInstance(TimeZone.getTimeZone(&quot;GMT&quot;));
    testCalendar.set(2007, 6, 2, 8, 9, 50);
    Date date = testCalendar.getTime();
    System.out.println(&quot;Before round() &quot; + date);
    System.out.println(&quot;After round()  &quot; + DateUtils.round(date, Calendar.MINUTE));
}
--2.1 produces
Before round() Mon Jul 02 03:09:50 CDT 2007
After round()  Mon Jul 02 03:10:00 CDT 2007  this is what I would expect
--2.2 and 2.3 produces
Before round() Mon Jul 02 03:09:50 CDT 2007
After round()  Mon Jul 02 03:01:00 CDT 2007  this appears to be wrong</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion>2.4</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.time.DateUtilsTest.java</file>
			
			
			<file type="M">org.apache.commons.lang.time.DateUtils.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is duplicated by" type="Duplicate">414</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2007-11-05 09:55:33" id="367" opendate="2007-10-30 13:25:17" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>FastDateFormat thread safety</summary>
			
			
			<description>FastDateFormat has several static HashMaps. These are currently not final, so there is no guarantee that they will be visible to all threads.
Patch to follow.
Also, as far as I can make out, the class shares SimpleDateFormat instances between threads.
It does not document why this is OK.
I&amp;amp;apos;m guessing that it assumes that instances of the SimpleDateFormat class are thread-safe provided that they have the same attributes, but this is not documented. If this is the case, it&amp;amp;apos;s not clear that it is a valid assumption.
</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion>2.4</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.time.FastDateFormat.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is duplicated by" type="Duplicate">429</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2008-02-24 04:24:58" id="414" opendate="2008-02-22 10:17:13" resolution="Duplicate">
		
		
		<buginformation>
			
			
			<summary>DateUtils.round() often fails</summary>
			
			
			<description>The example below shows the failure of DateUtils.round(Date,int). With version 2.1 round() works fine.

        Now                                 DateUtils                        calculated directly     
2008-02-22T11:09:06,680 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:07,000    ERROR
2008-02-22T11:09:06,680 Truncated: 2008-02-22T11:09:06,000         2008-02-22T11:09:06,000    ok
2008-02-22T11:09:07,040 Rounded:   2008-02-22T11:09:07,000         2008-02-22T11:09:07,000    ok
2008-02-22T11:09:07,040 Truncated: 2008-02-22T11:09:07,000         2008-02-22T11:09:07,000    ok
2008-02-22T11:09:07,399 Rounded:   2008-02-22T11:09:07,000         2008-02-22T11:09:07,000    ok
2008-02-22T11:09:07,399 Truncated: 2008-02-22T11:09:07,000         2008-02-22T11:09:07,000    ok
2008-02-22T11:09:07,743 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:08,000    ERROR
2008-02-22T11:09:07,743 Truncated: 2008-02-22T11:09:07,000         2008-02-22T11:09:07,000    ok
2008-02-22T11:09:08,102 Rounded:   2008-02-22T11:09:08,000         2008-02-22T11:09:08,000    ok
2008-02-22T11:09:08,102 Truncated: 2008-02-22T11:09:08,000         2008-02-22T11:09:08,000    ok
2008-02-22T11:09:08,446 Rounded:   2008-02-22T11:09:08,000         2008-02-22T11:09:08,000    ok
2008-02-22T11:09:08,446 Truncated: 2008-02-22T11:09:08,000         2008-02-22T11:09:08,000    ok
2008-02-22T11:09:08,805 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:09,000    ERROR
2008-02-22T11:09:08,805 Truncated: 2008-02-22T11:09:08,000         2008-02-22T11:09:08,000    ok
2008-02-22T11:09:09,149 Rounded:   2008-02-22T11:09:09,000         2008-02-22T11:09:09,000    ok
2008-02-22T11:09:09,149 Truncated: 2008-02-22T11:09:09,000         2008-02-22T11:09:09,000    ok
2008-02-22T11:09:09,508 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:10,000    ERROR
2008-02-22T11:09:09,508 Truncated: 2008-02-22T11:09:09,000         2008-02-22T11:09:09,000    ok
2008-02-22T11:09:09,852 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:10,000    ERROR
2008-02-22T11:09:09,852 Truncated: 2008-02-22T11:09:09,000         2008-02-22T11:09:09,000    ok
2008-02-22T11:09:10,211 Rounded:   2008-02-22T11:09:10,000         2008-02-22T11:09:10,000    ok
2008-02-22T11:09:10,211 Truncated: 2008-02-22T11:09:10,000         2008-02-22T11:09:10,000    ok
2008-02-22T11:09:10,555 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:11,000    ERROR
2008-02-22T11:09:10,555 Truncated: 2008-02-22T11:09:10,000         2008-02-22T11:09:10,000    ok
2008-02-22T11:09:10,915 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:11,000    ERROR
2008-02-22T11:09:10,915 Truncated: 2008-02-22T11:09:10,000         2008-02-22T11:09:10,000    ok
2008-02-22T11:09:11,258 Rounded:   2008-02-22T11:09:11,000         2008-02-22T11:09:11,000    ok
2008-02-22T11:09:11,258 Truncated: 2008-02-22T11:09:11,000         2008-02-22T11:09:11,000    ok
2008-02-22T11:09:11,618 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:12,000    ERROR
2008-02-22T11:09:11,618 Truncated: 2008-02-22T11:09:11,000         2008-02-22T11:09:11,000    ok
2008-02-22T11:09:11,961 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:12,000    ERROR
2008-02-22T11:09:11,961 Truncated: 2008-02-22T11:09:11,000         2008-02-22T11:09:11,000    ok
2008-02-22T11:09:12,321 Rounded:   2008-02-22T11:09:12,000         2008-02-22T11:09:12,000    ok
2008-02-22T11:09:12,321 Truncated: 2008-02-22T11:09:12,000         2008-02-22T11:09:12,000    ok
2008-02-22T11:09:12,665 Rounded:   2008-02-22T11:00:01,000         2008-02-22T11:09:13,000    ERROR
2008-02-22T11:09:12,665 Truncated: 2008-02-22T11:09:12,000         2008-02-22T11:09:12,000    ok


Example Code
java.text.SimpleDateFormat dtFormat = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&amp;amp;apos;T&amp;amp;apos;HH:mm:ss,SSS&quot;);

System.out.println(
    &quot;        Now            &quot;
    + &quot;            &quot;
    + &quot;   DateUtils  &quot;
    + &quot;         &quot;
    + &quot;       calculated directly &quot;
    + &quot;    &quot;);
int errorCnt = 0;
while(errorCnt &amp;lt; 10)
{
  java.util.Date now = new java.util.Date();
  
  java.util.Date roundedByUtils = org.apache.commons.lang.time.DateUtils.round(now, java.util.Calendar.SECOND);
  java.util.Date truncatedByUtils = org.apache.commons.lang.time.DateUtils.truncate(now, java.util.Calendar.SECOND);
  
  long rest = now.getTime() % 1000;
  java.util.Date rounded;
  java.util.Date truncated = new java.util.Date(now.getTime() - rest);
  if (rest &amp;lt; 500)
    rounded = truncated;
  else
    rounded = new java.util.Date(now.getTime() + (1000 - rest));
  boolean roundError = !roundedByUtils.equals(rounded);
  boolean truncateError = !truncatedByUtils.equals(truncated);
  if (roundError || truncateError)
    errorCnt++;

  System.out.println(
      dtFormat.format(now)
      + &quot; Rounded:   &quot;
      + dtFormat.format(roundedByUtils)
      + &quot;         &quot;
      + dtFormat.format(rounded)
      + &quot;    &quot;
      + (roundError ? &quot;ERROR&quot; : &quot;ok&quot;));
  System.out.println(
      dtFormat.format(now)
      + &quot; Truncated: &quot;
      + dtFormat.format(truncatedByUtils)
      + &quot;         &quot;
      + dtFormat.format(truncated)
      + &quot;    &quot;
      + (truncateError ? &quot;ERROR&quot; : &quot;ok&quot;));
  Thread.sleep(351);
}

</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion>2.4</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.time.DateUtilsTest.java</file>
			
			
			<file type="M">org.apache.commons.lang.time.DateUtils.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="duplicates" type="Duplicate">346</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2008-05-11 05:58:13" id="302" opendate="2006-12-22 19:47:10" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>StrBuilder does not implement clone()</summary>
			
			
			<description>As reported by FindBugs.
Does StrBuilder need to be Cloneable?</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion>2.6, 3.0</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.text.StrBuilder.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is related to" type="Reference">603</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2008-05-17 05:24:02" id="429" opendate="2008-04-24 13:04:57" resolution="Duplicate">
		
		
		<buginformation>
			
			
			<summary>NullPointerException (NPE) in FastDateFormat.getInstance(FastDateFormat.java:211)</summary>
			
			
			<description>Sometimes (sadly this is not reproducible) the following method call results in a NullPointerException (NPE):
Stacktrace:
java.lang.NullPointerException
        at org.apache.commons.lang.time.FastDateFormat.getInstance(FastDateFormat.java:211)
        at org.apache.commons.lang.time.DateFormatUtils.format(DateFormatUtils.java:258)
        at org.apache.commons.lang.time.DateFormatUtils.format(DateFormatUtils.java:232)
I don&amp;amp;apos;t know how this is actually possible, since the exception is being raised when accessing a static field &amp;amp;apos;cInstanceCache&amp;amp;apos; that will be implicitly initialized...
Could this have something to do with class gc?</description>
			
			
			<version>2.2</version>
			
			
			<fixedVersion/>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.apache.commons.lang.time.FastDateFormat.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="duplicates" type="Duplicate">367</link>
			
		
		</links>
		
	
	</bug>
</bugrepository>
