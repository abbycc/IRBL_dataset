<?xml version="1.0" encoding="utf-8"?>
<bugrepository name="SEC">
	<bug fixdate="2009-10-13 11:34:07" id="1269" opendate="2009-10-13 09:37:01" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Combining &lt;form-login&gt; and &lt;open-id&gt; fails to find entry point</summary>
			
			
			<description/>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.config.http.AuthenticationConfigBuilder.java</file>
			
			
			<file type="M">org.springframework.security.config.http.HttpSecurityBeanDefinitionParserTests.java</file>
			
			
			<file type="M">org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2009-11-03 02:33:46" id="1282" opendate="2009-10-30 16:23:15" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Possible Bug - UnanimousBased Incorrectly Grants When One Of The Votes Is An Absension</summary>
			
			
			<description>Overall Spring Security is AWESOME and you guys are doing a great job!
However, I am convinced I found either a bug or Doc error in UnanimousBased AccessDecisionManager.  
The API doc says &quot;grants access if only grant votes were received&quot; but I am certain I got it to grant access when one of the votes was an Abstention.
Or if this is not a bug, please clarify API to say 
&quot;grants access if only grant or abstained votes were received&quot;
Thanks so much and keep up the great work!!
Spring Security Rocks!</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.access.vote.UnanimousBased.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2009-11-04 00:51:09" id="1281" opendate="2009-10-30 03:35:54" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>RememberMeAuthenticationProvider is created with default &quot;key&quot; parameter instead of my own specified</summary>
			
			
			<description>I tried to define my own RememberMeService as shown
&amp;lt;security:remember-me 
   services-ref=&quot;rememberMeServices&quot; 
   key=&quot;$
{app.security.key.rememberMe}&quot;/&amp;gt;

&amp;lt;bean id=&quot;rememberMeServices&quot; class=&quot;org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices&quot;&amp;gt;
        &amp;lt;property name=&quot;key&quot; value=&quot;${app.security.key.rememberMe}
&quot;/&amp;gt;
        &amp;lt;property name=&quot;cookieName&quot; value=&quot;rememberme-ref&quot;/&amp;gt;
        &amp;lt;property name=&quot;parameter&quot; value=&quot;j_rememberme&quot;/&amp;gt;
        &amp;lt;property name=&quot;tokenValiditySeconds&quot; value=&quot;1209600&quot;/&amp;gt;
        &amp;lt;property name=&quot;tokenRepository&quot; ref=&quot;rememberMeDao&quot;/&amp;gt;
        &amp;lt;property name=&quot;userDetailsService&quot; ref=&quot;userDetailsDao&quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
But RememberMeAuthenticationProvider instance is created with default &quot;SpringSecured&quot; key instead of my own so RememberMeAuthenticationProvider.authenticate never succeeds.
</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.config.http.AuthenticationConfigBuilder.java</file>
			
			
			<file type="M">org.springframework.security.config.http.RememberMeBeanDefinitionParser.java</file>
			
			
			<file type="M">org.springframework.security.config.http.HttpSecurityBeanDefinitionParserTests.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2009-11-04 03:21:08" id="1280" opendate="2009-10-27 12:05:44" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>NullPointerException in PersistentTokenBasedRememberMeServices when logging out twice</summary>
			
			
			<description>When remember-me is enabled in Spring Security 3.0.0 RC1, a user who attempts to log out when not already logged in will cause a NullPointerException - and probably receive a blank page as a result.
The exception is:
ava.lang.NullPointerException
	at org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices.logout(PersistentTokenBasedRememberMeServices.java:145)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:98)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	at org.springframework.security.web.access.channel.ChannelProcessingFilter.doFilter(ChannelProcessingFilter.java:110)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:356)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:150)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
[...]
Logout works fine if the user is already logged in, the exception only occurs if the user is not logged in.
Obviously a well-designed web application doesn&amp;amp;apos;t show a logout link when no-one is logged in, which mitigatges the problem. However it does affect users who open multiple windows - and then log out from two or more of them.</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServicesTests.java</file>
			
			
			<file type="M">org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2009-11-04 03:40:21" id="1283" opendate="2009-11-01 07:25:44" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>AuthenticationConfigBuilder.createAnonymousFilter uses httpElt instead of anonymousElt</summary>
			
			
			<description>I think lines 378-383 should refer to anonymousElt, not httpElt. As it stands,  &amp;lt;security:anonymous /&amp;gt; namespace attributes are ignored.
        if (anonymousElt != null) 
{
            grantedAuthority = httpElt.getAttribute(&quot;granted-authority&quot;);
            username = httpElt.getAttribute(&quot;username&quot;);
            key = httpElt.getAttribute(&quot;key&quot;);
            source = pc.extractSource(anonymousElt);
        }</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.config.http.AuthenticationConfigBuilder.java</file>
			
			
			<file type="M">org.springframework.security.config.http.HttpSecurityBeanDefinitionParserTests.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2009-11-11 01:28:10" id="1289" opendate="2009-11-09 16:58:07" resolution="Duplicate">
		
		
		<buginformation>
			
			
			<summary>Successful registration event</summary>
			
			
			<description>With 3.0M2 and before I used the following code to register successful registrations and save client&amp;amp;apos;s IPs
[code]
public class AuthenticationListener implements ApplicationListener {
    @Override
    public void onApplicationEvent(ApplicationEvent event) {
        if (event instanceof AuthenticationSuccessEvent) 
{
            onAuthenticationSuccessEvent((AuthenticationSuccessEvent) event);
        }
    }
    public void onAuthenticationSuccessEvent(AuthenticationSuccessEvent authenticationSuccessEvent) 
{
        // my code
    }
}
[/code]
With 3.0RC1 there are no AuthenticationSuccessEvent events any more. I&amp;amp;apos;ve found the following comment for org.springframework.security.authentication.DefaultAuthenticationEventPublisher
&quot;The default strategy used by &amp;lt;tt&amp;gt;ProviderManager&amp;lt;/tt&amp;gt; for publishing authentication events.&quot;
But when I looked in ProviderManager I&amp;amp;apos;ve found that the default strategy is NullEventPublisher which is created by private field&amp;amp;apos;s initializer.
I thought that it&amp;amp;apos;s possible to inject DefaultAuthenticationEventPublisher with default XML security scheme but I&amp;amp;apos;ve found no entry point to do this.</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.config.authentication.AuthenticationManagerBeanDefinitionParserTests.java</file>
			
			
			<file type="M">org.springframework.security.config.authentication.AuthenticationManagerBeanDefinitionParser.java</file>
			
			
			<file type="M">org.springframework.security.authentication.DefaultAuthenticationEventPublisher.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="duplicates" type="Duplicate">1272</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2009-11-16 23:04:52" id="1272" opendate="2009-10-18 16:06:23" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>&lt;authentication-manager&gt; does not register default event handler DefaultAuthenticationEventPublisher</summary>
			
			
			<description>When using the namespace configuration, creating an &amp;lt;authentication-manager&amp;gt; should automatically register a default event publisher. This allows applications to be notified about security events such as logins and login failures - for example I want these notifications so that I can write audit logs of failed logins. 
The Javadoc on org.springframework.security.authentication.ProviderManager states that such a default event publisher is automatically registered when using the namespace. It says: 
&quot;The standard implementation is DefaultAuthenticationEventPublisher which maps common exceptions to events (in the case of authentication failure) and publishes an AuthenticationSuccessEvent if authentication succeeds. If you are using the namespace then an instance of this bean will be used automatically by the &amp;lt;http&amp;gt; configuration, so you will receive events from the web part of your application automatically.&quot;
However ProviderManager does not actually register a DefaultAuthenticationEventPublisher! It uses its private NullEventPublisher class that does nothing. That means that if you use the namespace configuration you don&amp;amp;apos;t actually receive the default events. The only way to receive those events is to manually create a ProviderManager bean and inject a DefaultAuthenticationEventPublisher bean into it.
I think that:

&amp;lt;authentication-manager&amp;gt; should use DefaultAuthenticationEventPublisher instead of NullEventPublisher
&amp;lt;authentication-manager&amp;gt; should allow the AuthenticationEventPublisher on ProviderManager to be overridden if desired

</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.config.authentication.AuthenticationManagerBeanDefinitionParserTests.java</file>
			
			
			<file type="M">org.springframework.security.config.authentication.AuthenticationManagerBeanDefinitionParser.java</file>
			
			
			<file type="M">org.springframework.security.authentication.DefaultAuthenticationEventPublisher.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is duplicated by" type="Duplicate">1289</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2009-11-16 23:14:34" id="1287" opendate="2009-11-06 11:58:40" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Regression with fix SEC-1022 - cannot register custom permissions w/BasicLookupStrategy</summary>
			
			
			<description>With the fix for SEC-1002 in 3.0RC1 and the removal of the static methods in BasePermission, unfortunately it is now impossible to use BasicLookupStrategy with custom permissions. This is because the PermissionFactory member of BasicLookupStrategy is private, with no accessor and no setter or constructor injection possible. While this wasn&amp;amp;apos;t available in prior versions of 3.0 either, at least in prior versions you could use the static methods to register permissions.
Can you expose the PermissionFactory member on BasicLookupStrategy, either through an overloaded constructor or setter?</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.acls.jdbc.BasicLookupStrategyTests.java</file>
			
			
			<file type="M">org.springframework.security.acls.jdbc.BasicLookupStrategy.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2009-11-17 07:45:36" id="1286" opendate="2009-11-06 06:15:36" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>toString misformatting for Acl.java</summary>
			
			
			<description>Line 348:
sb.append(&quot;parent: &quot;).append((this.parentAcl == null) ? &quot;Null&quot; : this.parentAcl.getObjectIdentity().toString());
There should be a space after &amp;amp;apos;Null&amp;amp;apos;, as it stands you get output with &quot;NullaclAuthorizationStrategy&quot;.
Example:
AccessControlEntryImpl[id: 3539; granting: true; sid: GrantedAuthoritySid[IS_AUTHENTICATED_ANONYMOUSLY]; permission: BasePermission[...............................R=1]; auditSuccess: false; auditFailure: false]
inheriting: true; parent: NullaclAuthorizationStrategy: org.springframework.security.acls.domain.AclAuthorizationStrategyImpl@1c7e73f; auditLogger: org.springframework.security.acls.domain.ConsoleAuditLogger@11efef0]</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.acls.domain.AclImpl.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2009-11-24 00:50:32" id="1306" opendate="2009-11-23 15:48:19" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>OpenIDAttribute class is not marked as Serializable</summary>
			
			
			<description>SEC-935 adds the OpenIDAttribute class. Because the OpenIDAuthenticationToken class (which is Serializable) has a List&amp;lt;OpenIDAttribute&amp;gt;, OpenIDAttribute should be Serializable too.
This interface should be no problem to add to the OpenIDAttribute class, because all its members are primitives or Strings and therefore already Serializable themselves.
P.S. while you&amp;amp;apos;re at it, OpenIDAttribute#toString() should probably be annotated with @Override (and in OpenIDAuthenticationStatus too).</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.openid.OpenIDAttribute.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2009-11-30 08:01:14" id="1295" opendate="2009-11-16 11:45:16" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Placing Security on Roo Aspected methods fails</summary>
			
			
			<description>When using @Secured on generated Roo_Entity methods a NPE is thrown due to target and _this information being missing when AspectJ creates the Join Point over an already aspected class. this NPE is thrown in AbstractMethodSecurityMetadataSource.getAttributes as there is a check against the Target to get the class. 
Have found that this information can also be retrieved from the signature.
This is using AspectJSecurityInterceptor configuration as opposed to SpringAOP, which we know doesn&amp;amp;apos;t work with Roo at all - yet   The configuration is based on the aspects sample within Spring Security.
I have changed the following within AbstractMethodSecurityMetadataSource and it seems to work.... 
Class&amp;lt;?&amp;gt; targetClass = jp.getTarget().getClass();
To the following - though it too could just use one line and only call the signature:
            Class&amp;lt;?&amp;gt; targetClass = null;
            if(jp.getTarget() != null)
            {
                targetClass = jp.getTarget().getClass();
            }
            else
            {
                //this class has already been aspected, hence see if we can get the info from the
                //static part
                targetClass = jp.getStaticPart().getSignature().getDeclaringType();
            }
</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.access.method.AbstractMethodSecurityMetadataSource.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2009-12-08 01:41:26" id="1317" opendate="2009-12-07 03:54:15" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Http configuration with no internal AuthenticationProviders causes Exception</summary>
			
			
			<description>The the internal ProviderManager, which is created by the &amp;lt;http&amp;gt; namespace element (SEC-1195), fails if it has no providers. Either a null provider should be added if the provider list is empty or the use of an internal instance should be skipped completely.</description>
			
			
			<version>3.0.0 RC1</version>
			
			
			<fixedVersion>3.0.0.RC2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.config.http.HttpSecurityBeanDefinitionParserTests.java</file>
			
			
			<file type="M">org.springframework.security.authentication.ProviderManager.java</file>
			
			
			<file type="M">org.springframework.security.authentication.ProviderManagerTests.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
</bugrepository>
