<?xml version="1.0" encoding="utf-8"?>
<bugrepository name="SEC">
	<bug fixdate="2006-05-31 03:41:01" id="281" opendate="2006-05-30 12:46:18" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Acegi 1.0 final - not compatible with Spring 1.2.8</summary>
			
			
			<description>Hi - Luke suggested we raise a ticket about this.
When creating a bean of class org.acegisecurity.ldap.search.FilterBasedLdapUserSearch with Spring 1.2.8, I receive the following error:
org.springframework.beans.factory.BeanDefinitionStoreException: Error registering bean with name &amp;amp;apos;userSearch&amp;amp;apos; defined in ServletContext resource [/WEB-INF/applicationContext-acegi-security-omj.xml]: Class that bean class [org.acegisecurity.ldap.search.FilterBasedLdapUserSearch] depends on not found; nested exception is java.lang.NoClassDefFoundError: org/springframework/dao/EmptyResultDataAccessEx
ception
java.lang.NoClassDefFoundError: org/springframework/dao/EmptyResultDataAccessException
        at java.lang.Class.forName0(Native Method)..
Reference Matt Raible&amp;amp;apos;s forum post about the same issue: http://forum.springframework.org/showthread.php?t=25430&amp;amp;highlight=EmptyResultDataAccessException
Thank you</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.1</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.acegisecurity.ldap.search.FilterBasedLdapUserSearch.java</file>
			
			
			<file type="M">org.acegisecurity.ldap.LdapTemplate.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2006-06-14 10:09:10" id="303" opendate="2006-06-14 03:42:12" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>LdapUserDetailsMapper should check that an attribute has actually been retrieved before attempting to map it to a role</summary>
			
			
			<description>If a particular attribute has not been retrieved from the directory (e.g. because it doesn&amp;amp;apos;t exist, or the user doesn&amp;amp;apos;t have permissions to read it), then in the code
            Attribute roleAttribute = attributes.get(roleAttributes[i]);
            NamingEnumeration attributeRoles = roleAttribute.getAll();
roleAttribute may be null and the second line will cause  a NullPointerException. A check should be made that the value isn&amp;amp;apos;t null and a debug message logged if it is.</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.1</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.acegisecurity.userdetails.ldap.LdapUserDetailsMapper.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2006-07-11 21:30:57" id="308" opendate="2006-06-29 03:03:56" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Lookup of headers in SavedRequestAwareWrapper is not case insensitive</summary>
			
			
			<description>According to the servlet spec, lookups using HttpServletRequest.getHeader and getHeaders should be case insensitive.  The current implementation of SavedRequest uses a HashMap to store saved headers.  The result is that the lookup of headers by name is case sensitive when SavedRequestAwareWrapper delegates to a SavedRequest.
We use a library that relies on the User-Agent header for rendering.  We experienced problems with rendering on the first page after login.  After debugging we found that the library was not able to get the correct value for the User-Agent due to the case sensitivity of the SavedRequest implementation.  I am attaching a patch that fixes this problem.  The patch is against the 1.0.1 tag.
After redirect after login:
request.getHeader(&quot;User-Agent&quot;) returns null;
request.getHeader(&quot;user-agent&quot;) returns the correct value;
Normal Request:
request.getHeader(&quot;User-Agent&quot;) returns the correct value;
request.getHeader(&quot;user-agent&quot;) returns the correct value;</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="D">org.acegisecurity.ui.savedrequest.SavedCookieTest.java</file>
			
			
			<file type="M">org.acegisecurity.ui.savedrequest.SavedRequest.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="duplicates" type="Duplicate">315</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2006-09-14 14:09:22" id="311" opendate="2006-07-05 00:18:13" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>equals(Object object) in SecurityConfig does not obey symmetry requirement of the interface contract</summary>
			
			
			<description>The SecurityConfig.equals(Object object) method violates the symmetry requirement imposed by the Object.equals(Object object) contract. If the &amp;amp;apos;other&amp;amp;apos; Object is a String, it compares that String to the attribute String stored in the SecurityConfig.
Consider the following situation:
[code]
String myString = &quot;CONFIG&quot;;
SecurityConfig myConfig = new SecurityConfig(&quot;CONFIG&quot;);
[/code]
While [code]myConfig.equals(myString)[/code] will return true, [code]myString.equals(myConfig)[/code] will return false, violating the equals symmetry.
I&amp;amp;apos;ve checked the 1.1-SNAPSHOT (via http://www.acegisecurity.org/multiproject/acegi-security/clover/org/acegisecurity/SecurityConfig.html) and the equals method of SecurityConfig apparently has not changed.</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.acegisecurity.securechannel.ChannelDecisionManagerImplTests.java</file>
			
			
			<file type="M">org.acegisecurity.SecurityConfigTests.java</file>
			
			
			<file type="M">org.acegisecurity.SecurityConfig.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2006-09-14 14:20:27" id="293" opendate="2006-06-02 01:06:56" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>BasicAclEntryAfterInvocationCollectionFilteringProvider causes ConcurrentModificationExceptio</summary>
			
			
			<description>The BasicAclEntryAfterInvocationCollectionFilteringProvider.CollectionFilterer has been modified is may 2005 to gain performance at the cost of risking a ConcurrentModificationException. The current version now unnecessary complex. In addition, the debug message no longer prints the correct original size.</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.acegisecurity.afterinvocation.BasicAclEntryAfterInvocationCollectionFilteringProvider.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2006-09-14 14:22:00" id="341" opendate="2006-08-25 01:31:48" resolution="Duplicate">
		
		
		<buginformation>
			
			
			<summary>Retrieving User after AuthenticationException</summary>
			
			
			<description>In AbstractUserDetailsAuthenticationProvider the authenticate() method calls the additionalAuthenticationChecks() method in a try block and can catch an AuthenticationException.  The code in the catch block (line 147 for rel 1.0.1) calls the retrieveUser() and additionalAuthenticationChecks() methods.  If the user details used for the call in the try block came from the cache, I understand why this makes sense.  However, if cacheWasUsed is false, the call to retrieve the user details obtains the exact same user details.
Perhaps the catch block should only repeat those method calls if cacheWasUsed is true, and throws the caught AuthenticationException if cacheWasUsed is false.</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.2</fixedVersion>
			
			
			<type>Improvement</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.acegisecurity.providers.dao.AbstractUserDetailsAuthenticationProvider.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="duplicates" type="Duplicate">328</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2006-09-28 19:46:36" id="297" opendate="2006-06-05 19:27:55" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>defaultTargetUrl Scheme</summary>
			
			
			<description>Documentation regarding inclusion of http://or https:// scheme in the defaultTargetUrl :
defaultTargetUrl indicates the URL that should be used for redirection if the HttpSession attribute named ACEGI_SAVED_REQUEST_KEY does not indicate the target URL once authentication is completed successfully. eg: /. The defaultTargetUrl will be treated as relative to the web-app&amp;amp;apos;s context path, and should include the leading /. Alternatively, inclusion of a scheme name (eg http:// or https://) as the prefix will denote a fully-qualified URL and this is also supported.
Snippet of acegi configuration file:
    &amp;lt;bean id=&quot;authenticationProcessingFilter&quot; class=&quot;org.acegisecurity.ui.webapp.AuthenticationProcessingFilter&quot;&amp;gt;
        &amp;lt;property name=&quot;authenticationManager&quot;&amp;gt;&amp;lt;ref local=&quot;authenticationManager&quot;/&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;authenticationFailureUrl&quot;&amp;gt;&amp;lt;value&amp;gt;/login.do?error=true&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;defaultTargetUrl&quot;&amp;gt;&amp;lt;value&amp;gt;https://bpz.fluxweb.com/ctxroot/home.do?method=home&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;filterProcessesUrl&quot;&amp;gt;&amp;lt;value&amp;gt;/j_security_check&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
However the defaultTargetUrl is always prefixed with the context root (based on the debugging information below):
[app] DEBUG [TP-Processor2] AbstractProcessingFilter.successfulAuthentication(384) | Redirecting to target URL from HTTP Session (or default): /ctxroothttps://bpz.fluxweb.com/ctxroot/home.do?method=home</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.2</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.acegisecurity.ui.AbstractProcessingFilter.java</file>
			
			
			<file type="M">org.acegisecurity.ui.AbstractProcessingFilterTests.java</file>
			
			
			<file type="M">org.acegisecurity.ui.webapp.SiteminderAuthenticationProcessingFilterTests.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is duplicated by" type="Duplicate">355</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2006-11-13 15:19:29" id="353" opendate="2006-09-18 09:56:06" resolution="Duplicate">
		
		
		<buginformation>
			
			
			<summary>Acegi only checks current class interfaces against rules</summary>
			
			
			<description>A implements I
B extends A
If method definition specifies I methods ( eg. I.myMethod() ) and the invoked class is B then method is not securited.
MethodDefinitionMap 201-202
        // Add attributes explicitly defined for this method invocation&amp;amp;apos;s interfaces
        Class[] interfaces = method.getDeclaringClass().getInterfaces();</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.3</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodDefinitionSourceEditorTests.java</file>
			
			
			<file type="D">org.springframework.security.annotation.Jsr250SecurityAnnotationAttributes.java</file>
			
			
			<file type="D">org.springframework.security.intercept.method.MethodDefinitionMap.java</file>
			
			
			<file type="M">org.springframework.security.util.SimpleMethodInvocation.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodInvocationPrivilegeEvaluatorTests.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodDefinitionAttributesTests.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodDefinitionSourceEditor.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.aopalliance.MethodDefinitionSourceAdvisor.java</file>
			
			
			<file type="M">org.springframework.security.config.AnnotationDrivenBeanDefinitionParser.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MockMethodDefinitionSource.java</file>
			
			
			<file type="M">org.springframework.security.OtherTargetObject.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.aopalliance.MethodDefinitionSourceAdvisorTests.java</file>
			
			
			<file type="M">org.springframework.security.config.InterceptMethodsBeanDefinitionDecorator.java</file>
			
			
			<file type="M">org.springframework.security.ConfigAttributeDefinition.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodDefinitionSource.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.aspectj.AspectJSecurityInterceptorTests.java</file>
			
			
			<file type="M">org.springframework.security.context.rmi.ContextPropagatingRemoteInvocationTests.java</file>
			
			
			<file type="M">org.springframework.security.annotation.MethodDefinitionSourceEditorTigerTests.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptorTests.java</file>
			
			
			<file type="M">org.springframework.security.MockJoinPoint.java</file>
			
			
			<file type="D">org.springframework.security.annotation.SecurityAnnotationAttributes.java</file>
			
			
			<file type="D">org.springframework.security.annotation.SecurityAnnotationAttributesTests.java</file>
			
			
			<file type="M">org.springframework.security.util.MethodInvocationUtils.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodDefinitionAttributes.java</file>
			
			
			<file type="M">org.springframework.security.vote.BasicAclEntryVoterTests.java</file>
			
			
			<file type="M">org.springframework.security.config.BeanIds.java</file>
			
			
			<file type="D">org.springframework.security.annotation.Jsr250SecurityAnnotationAttributesTests.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="duplicates" type="Duplicate">99</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2006-11-20 05:43:54" id="395" opendate="2006-11-20 05:06:38" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>HttpSessionEventPublisher causes a NullPointerException</summary>
			
			
			<description>As explained in...
http://forum.springframework.org/showthread.php?t=30766
The code naively assumes that one intance of the HttpSessionEventPublisher will be created by the container. In Websphere 5.1.1 at least, this is not true.
The code will be modified to get the ApplicationContext in an as needed basis rather than storing it in a field.</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.4</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.acegisecurity.ui.session.HttpSessionEventPublisherTests.java</file>
			
			
			<file type="M">org.acegisecurity.ui.session.HttpSessionEventPublisher.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2007-05-23 13:05:02" id="305" opendate="2006-06-23 10:21:23" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>HttpSessionContextIntegrationFilter to retain SecurityContext when rendering error pages</summary>
			
			
			<description>This happens when you want to set up error pages as described in SRV.9.9.2 Error Pages in Java Servlet Specification
Version 2.4.
If for example want to display the current user name on an error page, the security context does not contain the authenticated user.
The reason is believed to be that HttpSessionContextIntegrationFilter is only applied once per request.
Seehttp://forum.springframework.org/showthread.php?t=21534</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.4</fixedVersion>
			
			
			<type>Improvement</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.acegisecurity.context.HttpSessionContextIntegrationFilter.java</file>
			
			
			<file type="M">org.acegisecurity.context.HttpSessionContextIntegrationFilterTests.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is duplicated by" type="Duplicate">361</link>
			
		
		</links>
		
	
	</bug>
	<bug fixdate="2007-12-01 14:20:56" id="584" opendate="2007-10-26 09:45:47" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>ConcurrentSessionControllerImpl shouldn&amp;apos;t have a default sessionRegistry set internally</summary>
			
			
			<description>It contains the code
    private SessionRegistry sessionRegistry = new SessionRegistryImpl();
which is a bad idea, since SessionRegistryImpl must be registered through the application context in order to receive &quot;session destroyed&quot; events. If the user fails to set the sessionRegistry property then things won&amp;amp;apos;t work properly. The ConcurrentSessionFilter may also be using a different session registry instance.</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>1.0.6, 2.0.0 M1</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.concurrent.ConcurrentSessionControllerImpl.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2008-03-15 16:04:04" id="717" opendate="2008-03-15 14:59:35" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>Issue with User.getAuthorities() returning GrantedAuthority[]s in varying order and User.equals(Object) test failures as a result</summary>
			
			
			<description>JdbcUserDetailsManagerTests would fail during the createUserInsertsCorrectData and updateUserChangesDataCorrectlyAndClearsCache tests on certain platforms.
This was due to issues with the GrantedAuthority[] iteration order as returned by User. This problem was caused because the tests included:
private static final UserDetails joe = new User(&quot;joe&quot;, &quot;password&quot;, true, true, true, true, AuthorityUtils.stringArrayToAuthorityArray(new String[]
{&quot;A&quot;,&quot;C&quot;,&quot;B&quot;}
));
In turn JdbcDaoImpl.loadUserByUsername(String) is internally using a HashSet to manage the merging of GrantedAuthority[] instances from groups, those directly-assigned to the user, and any provided via the addCustomAuthorities(String username, List authorities) method. Because HashSet does not guarantee the order in which elements are returned, some platforms would return the above authorities as A, C, B (as required by the User.equals(Object) method and tests such as JdbcUserDetailsManagerTests which use User.equals(Object)) whereas others would reorder it (to A, B, C, although other variants were possible):
java.lang.AssertionError: expected:&amp;lt;org.springframework.security.userdetails.User@234c9000: Username: joe; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: A, C, B&amp;gt; but was:&amp;lt;org.springframework.security.userdetails.User@234c9000: Username: joe; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: A, B, C&amp;gt;
The issue is not so much with JdbcDaoImpl or its corresponding test, but rather that the User.equals(Object) method and/or User.getAuthorities() should more predictably operate when the GrantedAuthority[] array ordering varies. I am unaware of any users depending on GrantedAuthority[] ordering logic, as this has never been specified in the UserDetails contract as predictable. Therefore the most appropriate solution to this issue is to specify that UserDetails.getAuthorities() must consistently return GrantedAuthority[]s in the order of their natural key, irrespective of the order in which the GrantedAuthority[]s were added to the UserDetails instance. The UserDetails.equals(Object) should ensure it uses UserDetails.getAuthorities() in its evaluations, thus simplifying implementation of the symmetry requirements associated with Object.hashCode(). The GrantedAuthority interface should also extend Comparable, to ensure implementations have a simple way of implementing the required logic.</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>2.0.0 RC1</fixedVersion>
			
			
			<type>Bug</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.taglibs.authz.AuthorizeTagCustomGrantedAuthorityTests.java</file>
			
			
			<file type="M">org.springframework.security.adapters.jboss.JbossSpringSecurityLoginModuleTests.java</file>
			
			
			<file type="M">org.springframework.security.adapters.jetty.JettyAcegiUserRealmTests.java</file>
			
			
			<file type="M">org.springframework.security.providers.portlet.populator.ContainerPortletAuthoritiesPopulatorTests.java</file>
			
			
			<file type="M">org.springframework.security.adapters.resin.ResinAcegiAuthenticatorTests.java</file>
			
			
			<file type="M">org.springframework.security.adapters.catalina.CatalinaSpringSecurityUserRealmTests.java</file>
			
			
			<file type="M">org.springframework.security.userdetails.UserTests.java</file>
			
			
			<file type="M">org.springframework.security.GrantedAuthorityImpl.java</file>
			
			
			<file type="M">org.springframework.security.GrantedAuthority.java</file>
			
			
			<file type="M">org.springframework.security.userdetails.UserDetails.java</file>
			
			
			<file type="M">org.springframework.security.GrantedAuthorityImplTests.java</file>
			
			
			<file type="M">org.springframework.security.userdetails.User.java</file>
			
		
		</fixedFiles>
		
	
	</bug>
	<bug fixdate="2008-03-24 11:45:11" id="99" opendate="2005-11-14 14:27:20" resolution="Fixed">
		
		
		<buginformation>
			
			
			<summary>MethodDefinitionMap must support superclass declared methods</summary>
			
			
			<description>As reported by Tom Dunstan, MethodDefinitionMap line 168 by default will only locate methods declared for the class, and not for superclasses (ie uses clazz.getMethods() instead of clazz.getDeclaredMethods()). Whilst this is consistent with Spring&amp;amp;apos;s transaction handling, it does present an issue for those relying on generic superclasses and wanting to define authorization configuration attributes against them. It is proposed to add a new keyword to the property editor to direct MethodDefinitionMap to use getDeclaredMethods() vs getMethods(), such that by default the existing behaviour is preserved (to be consistent with transaction services) but the superclass search behaviour can be used instead. Alternatively, we could introduce an optional prefix the method name, such as &quot;+&quot;, which denotes &quot;locate the matching methods in the superclass&quot;. This would have the added advantage of ensuring only patterns where you deliberately want to use getDeclaredMethods() will use that method.</description>
			
			
			<version>1.0.0</version>
			
			
			<fixedVersion>2.0.0 RC1</fixedVersion>
			
			
			<type>Improvement</type>
			
		
		</buginformation>
		
		
		<fixedFiles>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodDefinitionSourceEditorTests.java</file>
			
			
			<file type="D">org.springframework.security.annotation.Jsr250SecurityAnnotationAttributes.java</file>
			
			
			<file type="D">org.springframework.security.intercept.method.MethodDefinitionMap.java</file>
			
			
			<file type="M">org.springframework.security.util.SimpleMethodInvocation.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodInvocationPrivilegeEvaluatorTests.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodDefinitionAttributesTests.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodDefinitionSourceEditor.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.aopalliance.MethodDefinitionSourceAdvisor.java</file>
			
			
			<file type="M">org.springframework.security.config.AnnotationDrivenBeanDefinitionParser.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MockMethodDefinitionSource.java</file>
			
			
			<file type="M">org.springframework.security.OtherTargetObject.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.aopalliance.MethodDefinitionSourceAdvisorTests.java</file>
			
			
			<file type="M">org.springframework.security.config.InterceptMethodsBeanDefinitionDecorator.java</file>
			
			
			<file type="M">org.springframework.security.ConfigAttributeDefinition.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodDefinitionSource.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.aspectj.AspectJSecurityInterceptorTests.java</file>
			
			
			<file type="M">org.springframework.security.context.rmi.ContextPropagatingRemoteInvocationTests.java</file>
			
			
			<file type="M">org.springframework.security.annotation.MethodDefinitionSourceEditorTigerTests.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptorTests.java</file>
			
			
			<file type="M">org.springframework.security.MockJoinPoint.java</file>
			
			
			<file type="D">org.springframework.security.annotation.SecurityAnnotationAttributes.java</file>
			
			
			<file type="D">org.springframework.security.annotation.SecurityAnnotationAttributesTests.java</file>
			
			
			<file type="M">org.springframework.security.util.MethodInvocationUtils.java</file>
			
			
			<file type="M">org.springframework.security.intercept.method.MethodDefinitionAttributes.java</file>
			
			
			<file type="M">org.springframework.security.vote.BasicAclEntryVoterTests.java</file>
			
			
			<file type="M">org.springframework.security.config.BeanIds.java</file>
			
			
			<file type="D">org.springframework.security.annotation.Jsr250SecurityAnnotationAttributesTests.java</file>
			
		
		</fixedFiles>
		
		
		<links>
			
			
			<link description="is depended on by" type="Depends">428</link>
			
			
			<link description="is duplicated by" type="Duplicate">424</link>
			
			
			<link description="is duplicated by" type="Duplicate">353</link>
			
			
			<link description="is related to" type="Related">734</link>
			
		
		</links>
		
	
	</bug>
</bugrepository>
